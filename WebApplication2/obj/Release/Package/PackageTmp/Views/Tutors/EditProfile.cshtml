@model WebApplication2.Models.TutorUpdateModel

@{
    ViewBag.Title = "Update Profile";
}

<div class="container fill img-rounded">
    <div class="row">
        <div class="col-md-1"></div>
        <div class="col-md-10 personal-info">
            <h1 class="h1over">@Resources.updateprofile</h1>
            <hr>
        </div>
    </div>
    <div class="row">

        <!-- left column -->
        <div class="col-md-1"></div>
        <div class="col-md-3">

            <div class="text-center">
                <img src="@Model.ProfileImage" class="avatar img-circle" id="profImg" alt="avatar" width="200" height="200">
                <h6>@Resources.uploadphote</h6>
                <input type="file" id="FileUpload" class="form-control" accept="image/*">
            </div>
        </div>

        <!-- edit form column -->
        <div class="col-md-8 personal-info">
            @if (ViewBag.isValidated == false)
            {
                <div class="alert alert-danger" id="iscompletedProfile">
                    <a class="panel-close close" data-dismiss="alert">×</a>
                    <i class="fa fa-exclamation"></i>
                    Please complete your profile.
                </div>
            }
            <div class="alert alert-info alert-dismissable" style="display: none;" id="alerts">
                <a class="panel-close close" data-dismiss="alert">×</a>
                <i class="fa fa-check"></i>
                @Resources.updatesuccess
            </div>
            <h3>@Resources.PersonalInfo</h3>
            @using (Ajax.BeginForm("EditProfile", "Tutors", new AjaxOptions() { HttpMethod = "POST", OnSuccess = "showMessage" }, new { @class = "form-horizontal" }))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.EditorFor(model => model.ProfileImage, new { htmlAttributes = new { style = "display: none;" } })
                <div class="form-group">
                    <label class="col-lg-3 control-label">@Html.LabelFor(model => model.FirstName)</label>
                    <div class="col-lg-6">
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>
                    <div class="form-group">
                        <label class="col-lg-3 control-label">@Html.LabelFor(model => model.LastName)</label>
                        <div class="col-lg-6">
                            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-lg-3 control-label">@Html.LabelFor(model => model.DOB)</label>

                        <div class="col-lg-3 input-group date" style="padding-left:15px" id='datetimepicker1'>
                            @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "form-control" } })
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>

                        </div>
                        @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger", @style = "margin-left:240px;" })
                    </div>

                    <div class="form-group">
                        <label class="col-md-3 control-label">@Html.LabelFor(model => model.Country)</label>
                        <div class="col-md-6">
                               @Html.HiddenFor(x => x.Country)
                            <div class="bfh-selectbox bfh-countries"  data-blank="false" data-country="@Model.Country" data-flags="true">
                                <input type="hidden" value="">
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">@Html.LabelFor(model => model.City)</label>
                        <div class="col-md-6">
                            @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">@Html.LabelFor(model => model.University)</label>
                        <div class="col-md-6">
                            @Html.EditorFor(model => model.University, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.University, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-lg-3 control-label">@Html.LabelFor(model => model.Degree)</label>
                        <div class="col-lg-6">
                            @Html.EditorFor(model => model.Degree, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Degree, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="col-md-3 control-label">@Html.LabelFor(model => model.AboutMe)</label>
                        <div class="col-md-6">

                            @Html.TextAreaFor(model => model.AboutMe, new { @class = "form-control", @rows = "6", @columns = "48", @style = "resize: none;" })
                            @Html.ValidationMessageFor(model => model.AboutMe, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">@Html.LabelFor(model => model.Experience)</label>
                        <div class="col-md-6">
                            @Html.TextAreaFor(model => model.Experience, new { @class = "form-control", @rows = "6", @columns = "48", @style = "resize: none;" })
                            @Html.ValidationMessageFor(model => model.Experience, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    @*@Html.ListBox("Expertise", ViewBag.ExpertiseVal as MultiSelectList)*@
                    <div class="form-group">
                        <label class="col-md-3 control-label">
                            @Html.LabelFor(model => model.Expertise, Resources.Expertise)
                        </label>
                        <div class="col-md-6">
                            @*@Html.DropDownListFor(model => model.Expertise, new SelectList(ViewBag.Expertise, "CategoryID", "CategoryName"), htmlAttributes: new { @class = "ui fluid normal dropdown", multiple = "multiple" })*@
                            @Html.DropDownList("Expertise", null, new { @class = "ui fluid normal dropdown", multiple = "multiple" })
                            @Html.ValidationMessageFor(model => model.Expertise, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    @*<select multiple="" name="skills" class="ui fluid normal dropdown">
                            <option value="">Skills</option>
                            <option value="angular">Angular</option>
                            <option value="css">CSS</option>
                            <option value="design">Graphic Design</option>
                            <option value="ember">Ember</option>
                            <option value="html">HTML</option>
                            <option value="ia">Information Architecture</option>
                            <option value="javascript">Javascript</option>
                            <option value="mech">Mechanical Engineering</option>
                            <option value="meteor">Meteor</option>
                            <option value="node">NodeJS</option>
                            <option value="plumbing">Plumbing</option>
                            <option value="python">Python</option>
                            <option value="rails">Rails</option>
                            <option value="react">React</option>
                            <option value="repair">Kitchen Repair</option>
                            <option value="ruby">Ruby</option>
                            <option value="ui">UI Design</option>
                            <option value="ux">User Experience</option>
                        </select>*@
                <div class="form-group">
                    <label class="col-lg-3 control-label">@Html.LabelFor(model => model.timeZone)</label>
                    <div class="col-lg-6">
                        @Html.HiddenFor(x => x.timeZone)
                        <select id="timezone" class="form-control"></select>

                    </div>
                </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label"></label>
                        <div class="col-md-6">
                            <input type="submit" class="btn btn-success" value="@Resources.SaveChages">

                        </div>
                    </div>
            }


        </div>
    </div>
</div>

@section scripts{
<link href="~/Theme/bootstrapformhelpers/css/bootstrap-formhelpers.min.css" rel="stylesheet" />
@*<script src="~/Theme/bootstrapformhelpers/js/bootstrap-formhelpers.js"></script>*@
<script src="~/Theme/bootstrapformhelpers/js/bootstrap-formhelpers.min.js"></script>
<script src="~/Theme/bootstrapformhelpers/js/timezones.full.min.js"></script>
    <link href="~/Theme/dropdownMultiple/semantic.min.css" rel="stylesheet" />
    <script src="~/Theme/dropdownMultiple/semantic.min.js"></script>
    <script>

        var result = $("#timezone").timezones();
        var selectedZone = "@Model.timeZone";
        if (selectedZone != "")
            $("#timezone").val(selectedZone);

        $("#timezone").change(function () {
            $("#timeZone").val($("#timezone").val() + "$" + $('#timezone').find('option:selected').attr("data-offset"));
        });


        //fill hidden field
        $('.bfh-selectbox').on('change.bfhselectbox', function () {
            $("#Country").val($(".bfh-selectbox input").val());
        });

        function showMessage() {

            $('html, body').animate({ scrollTop: 0 }, 'slow', function () {

            });
            $("#iscompletedProfile").hide();

            $("#alerts").show();
            window.setTimeout(function () {
                $("#alerts").fadeTo(800, 0).slideUp(800, function () {
                    $(this).remove();
                });
            }, 5000);

        }

        $('.ui.fluid.normal.dropdown').dropdown({
            maxSelections: 3
        });

        $(document).ready(function () {

            $("#AboutMe").keyup(function () {
                if ($(this).val().length > 255) {
                    $(this).val($(this).val().substr(0, 255));
                }
            });

            $("#Experience").keyup(function () {
                if ($(this).val().length > 255) {
                    $(this).val($(this).val().substr(0, 255));
                }
            });

            $("#FileUpload").change(function () {
                var formData = new FormData();
                var totalFiles = document.getElementById("FileUpload").files.length;
                for (var i = 0; i < totalFiles; i++) {
                    var file = document.getElementById("FileUpload").files[i];

                    formData.append("FileUpload", file);
                }
                $.ajax({
                    type: "POST",
                    url: '/Tutors/UploadProfile',
                    data: formData,
                    dataType: 'json',
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        $("#profImg").attr("src", response.result);
                        $("#ProfileImage").val(response.result);

                    },
                    error: function (error) {
                        alert("errror uploading profile");
                    }
                });
            });
        });

    </script>
}
